# encoding: utf-8
require 'rails_helper'
require 'spec_helper'

describe UsersController do
  render_views


  describe "GET 'index'" do

    describe "pour utilisateur non identifiés" do
      it "devrait refuser l'accès" do
        get :index
        response.should redirect_to(cnx_path)
        flash[:notice].should =~ /identifier/i
      end
    end

    describe "pour un utilisateur identifié" do

      before(:each) do
        @user = test_connexion(Factory(:user))
        second = Factory(:user, :email => "another@example.com")
        third  = Factory(:user, :email => "another@example.net")
        @users = [@user, second, third]
        30.times do
          @users << Factory(:user, :email => Factory.next(:email))
        end
      end

      it "devrait réussir" do
        get :index
        response.should be_success
      end

      it "devrait avoir le bon titre" do
        get :index
        assert_response :success
        assert_select "title", "Projet | Tous les utilisateurs"
        #response.should have_selector("title", :content => "Liste des utilisateurs")
      end

      it "devrait avoir un élément pour chaque utilisateur" do
        get :index
        @users[0..2].each do |user|
          assert_response :success
       	  assert_select "td", user.nom
          #response.should have_selector("li", :content => user.nom)
        end
      end

      it "devrait paginer les utilisateurs" do
        get :index
	assert_response :success
	#response.should have_selector("div.pagination")
	assert_select "div", {class: "pagination"}
        #response.should have_selector("span.disabled", :content => "Previous")
	assert_select "span", {class: "disabled"}, "Previous"
        #response.should have_selector("a", :href => "/users?page=2",  :content => "2")
	assert_select "a", {href: "/users?page=2"}, "2"
        #response.should have_selector("a", :href => "/users?page=2", :content => "Next")
	assert_select "a", {href: "/users?page=2"}, "Next"
      end

    end
  end

  describe "GET 'show'" do

    before(:each) do
      @user = Factory(:user)
    end

    it "devrait réussir" do
      get :show, :id => @user
      response.should be_success
    end

    it "devrait trouver le bon utilisateur" do
      get :show, :id => @user
      assigns(:user).should == @user
    end

    it "devrait avoir le bon titre" do
      get :show, :id => @user
      assert_response :success
      assert_select "title", "Projet | #{@user.nom}"
    end

    it "devrait inclure le nom de l'utilisateur" do
      get :show, :id => @user
      assert_response :success
      assert_select "h1", @user.nom
    end

    it "devrait avoir une image de profil" do
      get :show, :id => @user
      assert_response :success
      assert_select "div>img", class:"gravatar" 
    end

    it "devrait avoir un fichier cv" do
      get :show, :id => @user
      assert_response :success
      
	 response.should File.exists? "bbbbbbbbbbbbbbbbbbbb"
     
    end

  end

  describe "GET 'new'" do
    it "devrait reussir" do
      get 'new'
      response.should be_success
    end

    it "devrait avoir le titre indique" do
      get 'new'
      assert_response :success
      assert_select "title", "Projet | Inscription"
    end
  end


  describe "POST 'create'" do

    describe "échec" do

      before(:each) do
        @attr = { :nom => "", :email => "", :password => "",
                  :password_confirmation => "", :date_naissance =>"" }
      end

      it "ne devrait pas créer d'utilisateur" do
        lambda do
          post :create, :user => @attr
        end.should_not change(User, :count)
      end

      it "devrait avoir le bon titre" do
        post :create, :user => @attr
        assert_response :success
        assert_select "title", "Projet | Inscription"
      end

      it "devrait rendre la page 'new'" do
        post :create, :user => @attr
        response.should render_template('new')
      end
    end

    describe "succès" do

      before(:each) do
        @attr = { :nom => "New User", :email => "user@example.com",
                  :password => "foobar", :password_confirmation => "foobar" , :date_naissance =>"1994-07-29" }
      end

      it "devrait créer un utilisateur" do
        lambda do
          post :create, :user => @attr
        end.should change(User, :count).by(1)
      end

      it "devrait identifier l'utilisateur" do
        post :create, :user => @attr
        controller.should be_connecter
      end

      it "devrait rediriger vers la page d'affichage de l'utilisateur" do
        post :create, :user => @attr
        response.should redirect_to(user_path(assigns(:user)))
      end 

      it "devrait avoir un message de bienvenue" do
        post :create, :user => @attr
        flash[:success].should =~ /Bienvenue dans l'Application Projet/i
      end   
    end

  end

  describe "GET 'edit'" do

    before(:each) do
      @user = Factory(:user)
      test_connexion(@user)
    end

    it "devrait réussir" do
      get :edit, :id => @user
      response.should be_success
    end

    it "devrait avoir le bon titre" do
      get :edit, :id => @user
      #response.should have_selector("title", :content => "Édition profil")
      assert_response :success
      assert_select "title", "Projet | Édition profil"
    end

    it "devrait avoir un lien pour changer l'image Gravatar" do
      get :edit, :id => @user
      #response.should have_selector("a", :href => gravatar_url, :content => "changer")
      assert_response :success
      assert_select "a", {href: "http://gravatar.com/emails" }, "Édition profil"
    end
  end


  describe "PUT 'update'" do

    before(:each) do
      @user = Factory(:user)
      test_connexion(@user)
    end

    describe "Échec" do

      before(:each) do
        @attr = { :email => "", :nom => "", :password => "",
                  :password_confirmation => "", :date_naissance => "" }
      end

      it "devrait retourner la page d'édition" do
        put :update, :id => @user, :user => @attr
        response.should render_template('edit')
      end

      it "devrait avoir le bon titre" do
        put :update, :id => @user, :user => @attr	
        #response.should have_selector("title", :content => "Édition profil")
      	assert_response :success
      	assert_select "title", "Projet | Édition profil"
      end
    end

    describe "succès" do

      before(:each) do
        @attr = { :nom => "New Name", :email => "user@example.org",
                  :password => "barbaz", :password_confirmation => "barbaz", :date_naissance =>"1994-07-29" }
      end

      it "devrait modifier les caractéristiques de l'utilisateur" do
        put :update, :id => @user, :user => @attr
        @user.reload
        @user.nom.should  == @attr[:nom]
        @user.email.should == @attr[:email]
      end

      it "devrait rediriger vers la page d'affichage de l'utilisateur" do
        put :update, :id => @user, :user => @attr
        response.should redirect_to(user_path(@user))
      end

      it "devrait afficher un message flash" do
        put :update, :id => @user, :user => @attr
        flash[:success].should =~ /actualisé/
      end
    end
  end

  describe "authentification des pages edit/update" do

    before(:each) do
      @user = Factory(:user)
    end

    describe "pour un utilisateur non identifié" do

      it "devrait refuser l'acccès à l'action 'edit'" do
        get :edit, :id => @user
        response.should redirect_to(cnx_path)
      end

      it "devrait refuser l'accès à l'action 'update'" do
        put :update, :id => @user, :user => {}
        response.should redirect_to(cnx_path)
      end
    end

    describe "pour un utilisateur identifié" do

      before(:each) do
        wrong_user = Factory(:user, :email => "user@example.net")
        test_connexion(wrong_user)
      end

      it "devrait correspondre à l'utilisateur à éditer" do
        get :edit, :id => @user
        response.should redirect_to(root_path)
      end

      it "devrait correspondre à l'utilisateur à actualiser" do
        put :update, :id => @user, :user => {}
        response.should redirect_to(root_path)
      end
    end
  end

  describe "DELETE 'destroy'" do

    before(:each) do
      @user = Factory(:user)
    end

    describe "en tant qu'utilisateur non identifié" do
      it "devrait refuser l'accès" do
        delete :destroy, :id => @user
        response.should redirect_to(root_path)
      end
    end

    describe "en tant qu'utilisateur non administrateur" do
      it "devrait protéger la page" do
        test_connexion(@user)
        delete :destroy, :id => @user
        response.should redirect_to(root_path)
      end
    end

    describe "en tant qu'administrateur" do

      before(:each) do
        admin = Factory(:user, :email => "admin@example.com", :admin => true)
        test_connexion(admin)
      end

      it "devrait détruire l'utilisateur" do
        lambda do
          delete :destroy, :id => @user
        end.should change(User, :count).by(-1)
      end

      it "devrait rediriger vers la page des utilisateurs" do
        delete :destroy, :id => @user
        response.should redirect_to(users_path)
      end
    end
  end
end
